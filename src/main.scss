$primary: rgb(255, 89, 89);
$headings-font-family:        "Inconsolata";
$headings-color:              rgb(73, 73, 73);

$box-shadow:                  0 .5rem 1rem rgba(255,255,255,200);
$box-shadow-sm:               0 .125rem .25rem rgba(255,255,255,200);
$box-shadow-lg:               0 1rem 3rem rgba(255,255,255,200);
$box-shadow-inset:            inset 0 1px 2px rgba(255,255,255,200);

//=========================ROTATING COLOUR BACKGROUND AND HEADER==============================
body {
  width:100%;
  height:100%;
  background: linear-gradient(-45deg, rgb(20, 20, 20), rgb(22, 13, 13), #110707, rgb(22, 3, 3));
  background-size: 400% 500%;
  -webkit-animation: Gradient 10s ease infinite;
  -moz-animation: Gradient 10s ease infinite;
  animation: Gradient 10s ease infinite;
}

.header{
background: linear-gradient(-45deg, rgb(71, 32, 32), rgb(61, 20, 20), #3a0909, rgb(85, 1, 1));
background-size: 400% 400%;
-webkit-animation: Gradient 5s ease infinite;
  -moz-animation: Gradient 5s ease infinite;
  animation: Gradient 5s ease infinite;
}

@-webkit-keyframes Gradient {
  0%{background-position:0% 50%}
  50%{background-position:100% 50%}
  100%{background-position:0% 50%}
}
@-moz-keyframes Gradient {
  0%{background-position:0% 50%}
  50%{background-position:100% 50%}
  100%{background-position:0% 50%}
}
@keyframes Gradient { 
  0%{background-position:0% 50%}
  50%{background-position:100% 50%}
  100%{background-position:0% 50%}
}
//===============================================================================================

//=========================SLIDE IN ELEMENTS==============================

// Note that whenever these classes are used, the class "animation_wrapper" must be added to the parent component 
.slide_in_right {
	-webkit-animation: slide_in_right 0.5s cubic-bezier(0.250, 0.460, 0.450, 0.940) both;
	        animation: slide_in_right 0.5s cubic-bezier(0.250, 0.460, 0.450, 0.940) both;
}

.slide_in_left {
	-webkit-animation: slide_in_left 0.5s cubic-bezier(0.250, 0.460, 0.450, 0.940) both;
	        animation: slide_in_left 0.5s cubic-bezier(0.250, 0.460, 0.450, 0.940) both;
}

@-webkit-keyframes slide_in_left {
  0% {
    -webkit-transform: translateX(-1000px);
            transform: translateX(-1000px);
    opacity: 0;
  }
  100% {
    -webkit-transform: translateX(0);
            transform: translateX(0);
    opacity: 1;
  }
}
@keyframes slide_in_left {
  0% {
    -webkit-transform: translateX(-1000px);
            transform: translateX(-1000px);
    opacity: 0;
  }
  100% {
    -webkit-transform: translateX(0);
            transform: translateX(0);
    opacity: 1;
  }
}

@-webkit-keyframes slide_in_right {
  0% {
    -webkit-transform: translateX(1000px);
            transform: translateX(1000px);
    opacity: 0;
  }
  100% {
    -webkit-transform: translateX(0);
            transform: translateX(0);
    opacity: 1;
  }
}
@keyframes slide_in_right {
  0% {
    -webkit-transform: translateX(1000px);
            transform: translateX(1000px);
    opacity: 0;
  }
  100% {
    -webkit-transform: translateX(0);
            transform: translateX(0);
    opacity: 1;
  }
}
//=====================================================================================

//==============================ORGCHART SCSS==========================================
$line-color: #aaa;
$line-width: 2px;
$node-margin: 20px;
$node-width: 140px;

@mixin line {
    content: '';
    position: absolute;
    background-color: $line-color;
}

@mixin line-left {
    @include line;
    width: $line-width;
    height: calc(100% + #{$node-margin} + #{$line-width});
    left: calc(50% - #{$node-width / 2} - #{$node-margin / 2});
    top: -$line-width / 2;
}

@mixin line-left-first {
    @include line-left;
    height: calc(100% + #{$node-margin * 1.5} + #{$line-width});
    top: -$node-margin/2 - $line-width/2;
}

@mixin line-left-only {
    @include line-left;
    height: calc(50% + #{$node-margin * .5} + #{$line-width});
    top: -$node-margin/2 - $line-width/2;
}

@mixin list-line-left {
    @include line;
    width: $node-margin / 2;
    height: $line-width;
    top: calc(50%);
    left: calc(50% - #{$node-width / 2} - #{$node-margin / 2});
}

@mixin list-line-top {
    @include line;
    width: $node-width / 2;
    height: $line-width;
    bottom: -$node-margin / 2;
    left: calc(50% - #{$node-width / 2});
}

.org-tree {
    .node {
        width: $node-width;
        padding: 15px;
        border: 1px solid $line-color;
        border-radius: 2px;
        position: relative;
    }
    .item {
        display: flex;
        flex-direction: column;
    }
    .parent {
        position: relative;
        display: flex;
        margin-bottom: $node-margin;
        &:not(.collapsed):after {
            // Builds the line down to children 
            @include line;
            width: $line-width;
            height: $node-margin / 2;
            bottom: 0;
            left: 50%;
            background-color: $line-color;
            transform: translateY(100%);
        }
    }
    .row {
        .item {
            // Styles for standard pyramid top lines to parent
            &:first-child>.child {
                &::after {
                    left: 50%;
                    width: 50%;
                }
            }
            &:last-child>.child::after {
                width: calc(50% + #{$line-width});
            }
            &:only-child>.child::after {
                width: 0px;
            }
        }
    }
     .item>.child {
        &:not(.root):before {
            @include line;
            left: 50%;
            top: 0;
            transform: translateY(-100%);
            width: $line-width;
            height: $node-margin / 2;
        }
        &:after {
            @include line;
            left: 0;
            top: -$node-margin / 2;
            transform: translateY(-100%);
            height: $line-width;
            width: 100%;
        }
    }
    $breakpoints: (99999px 1) (1199px 2) (991px 4);
    @each $breakpoint in $breakpoints {
        $minWidth: nth($breakpoint, 1);
        $col: nth($breakpoint, 2);
        @media screen and (max-width: $minWidth) {
            @for $i from 1 through $col {
                .child-width-#{$i} {
                    .item>.child {
                        &:before,
                        &:after {
                            display: none;
                        }
                        .node:not(.root) {
                            &:before {
                                @include line-left
                            }
                            &::after {
                                @include list-line-left;
                            }
                        }
                    }
                    .item:last-child:not(:only-child)>.child {
                        .node:not(.root):before {
                            height: calc(50% + #{$line-width});
                        }
                    }
                    .item:only-child>.child {
                        .node:not(.root):before {
                            @include line-left-only;
                        }
                    }
                    >.row {
                        margin-left: -50%;
                    }
                    .node {
                        margin-bottom: $node-margin;
                    }
                    .row {
                        margin-left: $node-margin;
                        margin-right: 0px;
                        .item {
                            &:first-child:not(:only-child)>.child {
                                .node:not(.root)::before {
                                    @include line-left-first;
                                }
                            }
                            &:not(:last-child):before {
                                @include line-left;
                            }
                        }
                    }
                    .parent {
                        margin-bottom: 0px;
                        display: block;
                        &:not(.collapsed):before {
                            @include list-line-top
                        }
                    }
                    
                }
            }
        }
    }
}
//===================================================================

//Import the rest of Bootstrap functionality. The code written above is there in order to overwrite some Bootstrap functionality.
@import "../node_modules/bootstrap/scss/bootstrap";

//================== SWITCH BETWEEN MOBILE AND DESKTOP HEADER ===================
@media screen and (min-width: 600px) {
  .for_mobile {
    display: none;
  } 
}

@media screen and (max-width: 600px) {
  .for_desktop {
    display: none;
  } 
}
//===============================================================================

html{
  width:100%;
  height:100%;
}

.solid_divider {
    border-top: 10px solid #bbb;
}

.info_text {
    color: rgb(255, 255, 255);
}

.button_row:hover{
    transform: scale(1.1);
  }

